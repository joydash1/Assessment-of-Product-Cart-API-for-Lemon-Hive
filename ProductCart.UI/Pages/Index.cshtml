@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<style type="text/css">
    /* Warehouse Cards */
    .warehouse-card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url("/images/Vector.png");
        background-size: 80px 80px;
        background-repeat: repeat;
        opacity: 0.15;
        z-index: 0;
        border-radius: 16px;
    }

    .warehouse-card {
        height: 100%;
        position: relative;
        z-index: 1;
        color: white;
        padding: 1.5rem;
        border-radius: 16px;
        background-color: #2F80ED;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .car-description {
        margin-top: 8px;
        flex: 1;
    }

    .warehouse-heading {
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }

    .warehouse-paragraph {
        font-size: 16px;
        margin: 0;
    }

    .card-icon img {
        width: 48px;
        height: 48px;
        padding: 2px;
    }

    /* Search and Add Product */
    .search-box .form-control {
        height: 48px;
        border-radius: 6px 0 0 6px;
        border-right: none;
        background-color: #f8f9fa;
    }

    .search-box .input-group-text {
        background-color: #f8f9fa;
        border-left: none;
        border-radius: 0 6px 6px 0;
        height: 48px;
        cursor: pointer;
    }

    .add-product-btn {
        background-color: #f8f9fa;
        border: 1px solid #007bff;
        color: #007bff;
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: 500;
    }

        .add-product-btn:hover {
            background-color: #007bff;
            color: #fff;
        }

    /* Product Cards - Fixed Dimensions */
    .product-card {
        width: 329.25px;
        height: 394px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        transition: all 0.3s ease;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        margin: 0 auto;
    }

        .product-card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

    .product-image-container {
        height: 200px;
        overflow: hidden;
    }

    .product-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 8px 8px 0 0;
    }

    .card-body {
        padding: 16px;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .product-title {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 8px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        /*min-height: 54px;*/
    }

    .price-container {
        margin-bottom: 16px;
    }

    .product-price {
        font-size: 20px;
        font-weight: 700;
        color: #2F80ED;
    }

    .product-old-price {
        font-size: 16px;
        text-decoration: line-through;
        color: #999;
        margin-left: 8px;
    }

    .add-to-cart-btn {
        background-color: #2F80ED;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 10px 16px;
        font-weight: 500;
        width: 100%;
        margin-top: auto;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .add-to-cart-btn:hover {
            background-color: #1a6fd8;
        }

    /* Pagination */
    .pagination-container {
        display: flex;
        align-items: center;
        gap: 20px;
        flex-wrap: wrap;
        justify-content: flex-end;
    }

    .custom-modal-size .modal-dialog {
        max-width: 1153px;
        width: 100%;
        height: auto;
        margin-top: 30px;
    }

    #btnProductSave {
        width: 100%;
    }
    /* .custom-modal-size .modal-content {
                    height: 597px;
                } */

</style>

<div class="container mt-4">

    <div class="row g-4 mb-4">
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card warehouse-card">
                <div class="card-icon">
                    <img src="~/images/warehouse 1.png" alt="Warehouse">
                </div>
                <div class="car-description">
                    <h5 class="warehouse-heading">Total Product : 100</h5>
                    <p class="warehouse-paragraph">Warehouse has total of 100 product today &amp; the max capacity is 200.</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card warehouse-card">
                <div class="card-icon">
                    <img src="~/images/seller 1.png" alt="Vendor">
                </div>
                <div class="car-description">
                    <h5 class="warehouse-heading">Total Vendor: 06</h5>
                    <p class="warehouse-paragraph">A total of 6 out of 10 vendor are available for supply now.</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card warehouse-card">
                <div class="card-icon">
                    <img src="~/images/box 3.png" alt="Box">
                </div>
                <div class="car-description">
                    <h5 class="warehouse-heading">Unique Product : 40</h5>
                    <p class="warehouse-paragraph">Total number of products that are not duplicate or redundant.</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4 mb-4 align-items-center">
        <div class="col-12 col-md-8">
            <div class="input-group search-box">
                <input type="text" class="form-control" placeholder="Search product..." id="txtSearchProduct" />
                <span class="input-group-text" id="btnSearchProduct" style="cursor: pointer;">
                    <i class="fa-solid fa-magnifying-glass"></i>
                </span>
            </div>
        </div>
        <div class="col-12 col-md-4 text-md-end">
            <button class="btn add-product-btn w-100 w-md-auto" data-bs-toggle="modal" data-bs-target="#addProductModal">
                <i class="fa-solid fa-circle-plus"></i> Add Product
            </button>
        </div>
    </div>

    <div class="row g-4 mb-4">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <div id="product-count-info"></div>
        </div>
    </div>

    <div class="row g-4 mb-4" id="cardDiv" @* style="height:789px; width:auto;" *@>
        <div class="col-12 col-md-6 col-lg-3 d-flex justify-content-center">
            <div class="card product-card">
               
            </div>
        </div>
    </div>
    
    <div class="row g-4 mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-end">
                <div id="pagination-container" class="mt-4 d-flex justify-content-center">

                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade custom-modal-size" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div>
                    <h1 class="modal-title fs-5" id="addProductModalLabel">Add New Product</h1>
                    <p class="fs-6 mb-0">Add description of your new product.</p>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3 mb-3">
                    <div class="col-12 col-md-6">
                        <label>Product Name</label>
                        <input type="text" class="form-control" placeholder="Product name" id="txtProductName" />
                    </div>
                    <div class="col-12 col-md-6">
                        <label>Product Image</label>
                        <input type="file" class="form-control" id="fileProductImage" />
                    </div>
                    <div class="col-12 col-md-6">
                        <label>Slug</label>
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="product-name" id="txtProductSlug" />
                            <button class="btn btn-primary" type="button" id="btnSlugAction">Generate</button>
                        </div>
                    </div>
                    <div class="col-12 col-md-6">
                        <label>Price</label>
                        <input type="text" class="form-control" placeholder="Product price" id="txtProductPrice" />
                    </div>
                    <div class="col-12 col-md-6">
                        <label>Discount Start</label>
                        <input type="date" class="form-control" id="txtDiscountDateFrom" />
                    </div>
                    <div class="col-12 col-md-6">
                        <label>Discount End</label>
                        <input type="date" class="form-control" id="txtDiscountTo" />
                    </div>
                </div>
                <div class="row g-3 mb-3">
                    <div class="col-12 text-center">
                        <button type="button" class="btn btn-primary" id="btnProductSave">Add</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ProductCardModal" tabindex="-1" aria-labelledby="ProductCardModalLabel">
    <div class="modal-dialog modal-dialog-end modal-lg" style="margin-left: auto;margin-right: 0;">
        <div class="modal-content" style="height: 100vh; padding: 64px;border-radius: 0;overflow-y: auto;">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold fs-2">Shopping Cart</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-0" id="cart-items-container"></div>
            <div class="modal-footer justify-content-between border-0 pt-4">
                <div class="text-muted fs-5">Subtotal</div>
                <div class="fw-bold fs-4" id="cart-subtotal">$0.00</div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        const apiUrl = '@Model.ApiUrl';
        const cartDetails = [];
        $(document).ready(function () {

            $('#btnProductSave').click(function () {
                var formData = new FormData();

                formData.append('ProductName', $('#txtProductName').val());
                formData.append('ProductSlug', $('#txtProductSlug').val());
                formData.append('ProductPrice', $('#txtProductPrice').val());
                formData.append('DiscountStartDate', $('#txtDiscountDateFrom').val());
                formData.append('DiscountEndDate', $('#txtDiscountTo').val());

                var fileInput = $('#fileProductImage')[0];

                if (fileInput.files.length > 0) {
                    formData.append('File', fileInput.files[0]);
                }

                  $.ajax({
                        url: apiUrl + "Products/SaveProduct",
                        type: 'POST',
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (res) {
                            if (res.status) {
                                Swal.fire({
                                  icon: 'success',
                                  title: 'Success',
                                  text: res.message,
                                }).then(() => {
                                  window.location.reload();
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: res.message,
                                });
                            }
                        },
                        error: function (err) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'An unexpected error occurred.',
                            });
                        }
                  });
            });

            $(document).on('click','#btnSlugAction', function() {
              const input = $('#txtProductSlug');
              const originalText = input.val();
              if ($.trim(originalText).length === 0) {
                  Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Please enter a product name first.',
                        });
                return;
              }
              const uniqueSlug = generateUniqueSlug(originalText);
              input.val(uniqueSlug);
            });

            $('#btnSearchProduct').on('click', function () {
                const searchTerm = $('#txtSearchProduct').val().trim();
                getAllProductList(searchTerm);
            });

            $('#txtSearchProduct').on('keypress', function (e) {
                if (e.which === 13) {
                    $('#btnSearchProduct').click();
                }
            });

            getAllProductList();
        });

        function getAllProductList(productName = "", page = 1, pageSize = 8) {
            $.ajax({
                url: apiUrl + "Products/GetProductList?ProductName=" +  productName + "&page=" + page + "&pageSize=" + pageSize,
                method: "GET",
                success: function (response) {
                    //console.log(response);
                    let products = response.data.items;
                    let totalCount = response.data.totalCount;
                    let html = "";

                    products.forEach(function (product) {
                        let hasDiscount = product.productDiscountedPrice !== null;
                        let productImagePath = apiUrl + product.productImage.replace(/\\/g, "/").replace(/ /g, "%20");

                        html += ` <div class="col-12 col-md-6 col-lg-3 d-flex justify-content-center">
                                     <div class="card product-card">
                                        <div class="product-image-container">
                                            <img src="${productImagePath}" class="card-img-top product-image" alt="${product.productName}" />
                                         </div>
                                         <div class="card-body">
                                            <h5 class="product-title">${product.productName}</h5>
                                            <div class="price-container">
                                                <span class="product-price">
                                                    $${hasDiscount ? product.productDiscountedPrice.toFixed(2) : product.productPrice.toFixed(2)}
                                                </span>
                                                ${hasDiscount ? `<span class="product-old-price">$${product.productPrice.toFixed(2)}</span>` : ''}
                                            </div>
                                            <div class="quantity-selector d-flex align-items-center justify-content-between bg-primary text-white rounded px-2 py-1 my-2 mt-2" style="width: 108px;">
                                                <button class="btn btn-sm text-white fw-bold px-2" onclick="decreaseQuantity(this)" type="button">−</button>
                                                <span class="mx-2 quantity-value">1</span>
                                                <button class="btn btn-sm text-white fw-bold px-2" onclick="increaseQuantity(this)" type="button">+</button>
                                            </div>
                                            <button class="btn add-to-cart-btn" data-productid="${product.id}" onclick="addToCart(this)">Add to cart</button>
                                         </div>
                                     </div>
                                  </div>`;
                    });

                    $("#cardDiv").html(html);

                    let showingFrom = (page - 1) * pageSize + 1;
                    let showingTo = showingFrom + products.length - 1;
                    $("#product-count-info").html(`Showing ${showingFrom} – ${showingTo} of ${totalCount} results`);

                    let totalPages = Math.ceil(totalCount / pageSize);
                    renderPaginationControls(page, totalPages);
                },
                error: function (xhr) {
                    alert("Failed to load products");
                    console.error(xhr.responseText);
                }
            });
        }



        function createSlug(text) {
          return text
            .toLowerCase()
            .trim()
            .replace(/[^\w\s-]/g, '')
            .replace(/\s+/g, '-')
            .replace(/-+/g, '-');
        }

        function generateUniqueSlug(text) {
          const slug = createSlug(text);
          return `${slug}`;
        }

        function renderPaginationControls(currentPage, totalPages) {
            let paginationHtml = `<ul class="pagination">`;

            if (currentPage > 1) {
                paginationHtml += `<li class="page-item">
                    <a class="page-link" href="#" onclick="getAllProductList('', ${currentPage - 1})"><i class="fa-solid fa-arrow-left"></i> Prev</a>
                </li>`;
            } else {
                paginationHtml += `<li class="page-item disabled"><span class="page-link"><i class="fa-solid fa-arrow-left"></i> Prev</span></li>`;
            }
           
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, currentPage + 2);

            for (let i = startPage; i <= endPage; i++) {
                paginationHtml += `<li class="page-item ${i === currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="getAllProductList('', ${i})">${i}</a>
                </li>`;
            }

           
            if (currentPage < totalPages) {
                paginationHtml += `<li class="page-item">
                    <a class="page-link" href="#" onclick="getAllProductList('', ${currentPage + 1})">Next <i class="fa-solid fa-arrow-right"></i></a>
                </li>`;
            } else {
                paginationHtml += `<li class="page-item disabled"><span class="page-link">Next <i class="fa-solid fa-arrow-right"></i></span></li>`;
            }

            paginationHtml += `</ul>`;
           
            $('#pagination-container').html(paginationHtml);
        }
        
        function increaseQuantity(button) {
            const quantitySpan = button.parentElement.querySelector('.quantity-value');
            let qty = parseInt(quantitySpan.innerText);
            quantitySpan.innerText = qty + 1;
        }

        function decreaseQuantity(button) {
            const quantitySpan = button.parentElement.querySelector('.quantity-value');
            let qty = parseInt(quantitySpan.innerText);
            if (qty > 1) {
                quantitySpan.innerText = qty - 1;
            }
        }

        function increaseQuantity(button) {
            const quantitySpan = button.parentElement.querySelector('.quantity-value');
            let qty = parseInt(quantitySpan.innerText);
            quantitySpan.innerText = qty + 1;
        }

        function decreaseQuantity(button) {
            const quantitySpan = button.parentElement.querySelector('.quantity-value');
            let qty = parseInt(quantitySpan.innerText);
            if (qty > 1) {
                quantitySpan.innerText = qty - 1;
            }
        }
        
        function addToCart(button) {
            const card = button.closest('.product-card');
            const id = button.getAttribute("data-productid");
            const name = card.querySelector('.product-title').textContent.trim();
            const image = card.querySelector('.product-image').getAttribute('src');
            const quantity = parseInt(card.querySelector('.quantity-value').textContent.trim());
            const price = parseFloat(card.querySelector('.product-price').textContent.replace('$', ''));

          
            const existingItem = cartDetails.find(item => item.id === id);
            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                cartDetails.push({
                    id,
                    name,
                    image,
                    price,
                    quantity
                });
            }

            updateCartModal();
            updateCartCount();
            //showCartModal();
        }

        function updateCartModal() {
            const container = document.getElementById('cart-items-container');
            const subtotalElement = document.getElementById('cart-subtotal');
            container.innerHTML = '';

            let subtotal = 0;

            cartDetails.forEach(item => {
                const itemTotal = item.quantity * item.price;
                subtotal += itemTotal;

                const itemHTML = `
                    <div class="d-flex align-items-center mb-3">
                        <img src="${item.image}" alt="${item.name}" style="width: 60px; height: 60px; object-fit: cover;" class="me-3 rounded">
                        <div>
                            <h6 class="mb-1">${item.name}</h6>
                            <small>Qty : ${item.quantity} × ${item.price.toFixed(2)}</small>
                        </div>
                        <div class="ms-auto fw-bold">$${itemTotal.toFixed(2)}</div>
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', itemHTML);
            });

            subtotalElement.textContent = `$${subtotal.toFixed(2)}`;
        }

        function showCartModal() {
            const modalElement = document.getElementById('ProductCardModal');
            const bsModal = bootstrap.Modal.getOrCreateInstance(modalElement);
            bsModal.show();
        }

        function updateCartCount() {
            const totalUniqueItems = cartDetails.length;
            document.getElementById('cart-count').textContent = `(${totalUniqueItems})`;
        }

    </script>
}